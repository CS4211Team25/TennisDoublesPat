enum{MT, KS, na};
enum{KServe, MServe, SServe, TServe};
enum{useLow, useHigh};


/*
Without Improvements:
*/

//var KServe_MTWin_LowProb = 3686;
//var KServe_MTWin_HighProb = 4597;
//
//var SServe_MTWin_LowProb = 3740;
//var SServe_MTWin_HighProb = 4567;
//
//var MServe_MTWin_LowProb = 3608;
//var MServe_MTWin_HighProb = 4513;
//
//var TServe_MTWin_LowProb = 4091;
//var TServe_MTWin_HighProb = 5511;

/*
With Improvements:
*/

var KServe_MTWin_LowProb = 4187;
var KServe_MTWin_HighProb = 5087;

var SServe_MTWin_LowProb = 4243;
var SServe_MTWin_HighProb = 5060;

var MServe_MTWin_LowProb = 4203;
var MServe_MTWin_HighProb = 4984;

var TServe_MTWin_LowProb = 4729;
var TServe_MTWin_HighProb = 6013;

var probToUse = useLow;
var turn = 0;
var gamesToWin = 6;
var MTGamesWon = 0;
var KSGamesWon = 0;

var won = na;

SetWithLowProb = UseLowProb; FirstServe; NextGame;
SetWithHighProb = UseHighProb; FirstServe; NextGame;

UseLowProb = SetProbToLow{probToUse = useLow} -> Skip;
UseHighProb = SetProbToHigh{probToUse = useHigh} -> Skip;

FirstServe = []i:{SServe, TServe, KServe, MServe}@ TossCoin{turn = i} -> Skip;

NextGame = KServeGame [] SServeGame [] MServeGame [] TServeGame [] ([won != na] GameOver -> Skip);

KServeGame = [won == na && turn == KServe] K_Serve;
SServeGame = [won == na && turn == SServe] S_Serve;

MServeGame = [won == na && turn == MServe] M_Serve;
TServeGame = [won == na && turn == TServe] T_Serve;

K_Serve = pcase {
	(probToUse * KServe_MTWin_HighProb) + ((1 - probToUse) * KServe_MTWin_LowProb): MTWins{MTGamesWon++} -> GoNext{if ((MTGamesWon == gamesToWin && MTGamesWon >= KSGamesWon + 2) || MTGamesWon == gamesToWin + 1) {won = MT} else {turn = (turn + 1) % 4}} -> NextGame
	10000 - ((probToUse * KServe_MTWin_HighProb) + ((1 - probToUse) * KServe_MTWin_LowProb)): KSWins{KSGamesWon++} -> GoNext{if ((KSGamesWon == gamesToWin && KSGamesWon >= MTGamesWon + 2) || KSGamesWon == gamesToWin + 1) {won = KS} else {turn = (turn + 1) % 4}} -> NextGame
};

S_Serve = pcase {
	(probToUse * SServe_MTWin_HighProb) + ((1 - probToUse) * SServe_MTWin_LowProb): MTWins{MTGamesWon++} -> GoNext{if ((MTGamesWon == gamesToWin && MTGamesWon >= KSGamesWon + 2) || MTGamesWon == gamesToWin + 1) {won = MT} else {turn = (turn + 1) % 4}} -> NextGame
	10000 - ((probToUse * SServe_MTWin_HighProb) + ((1 - probToUse) * SServe_MTWin_LowProb)): KSWins{KSGamesWon++} -> GoNext{if ((KSGamesWon == gamesToWin && KSGamesWon >= MTGamesWon + 2) || KSGamesWon == gamesToWin + 1) {won = KS} else {turn = (turn + 1) % 4}} -> NextGame
};

M_Serve = pcase {
	(probToUse * MServe_MTWin_HighProb) + ((1 - probToUse) * MServe_MTWin_LowProb): MTWins{MTGamesWon++} -> GoNext{if ((MTGamesWon == gamesToWin && MTGamesWon >= KSGamesWon + 2) || MTGamesWon == gamesToWin + 1) {won = MT} else {turn = (turn + 1) % 4}} -> NextGame
	10000 - ((probToUse * MServe_MTWin_HighProb) + ((1 - probToUse) * MServe_MTWin_LowProb)): KSWins{KSGamesWon++} -> GoNext{if ((KSGamesWon == gamesToWin && KSGamesWon >= MTGamesWon + 2) || KSGamesWon == gamesToWin + 1) {won = KS} else {turn = (turn + 1) % 4}} -> NextGame
};

T_Serve = pcase {
	(probToUse * TServe_MTWin_HighProb) + ((1 - probToUse) * TServe_MTWin_LowProb): MTWins{MTGamesWon++} -> GoNext{if ((MTGamesWon == gamesToWin && MTGamesWon >= KSGamesWon + 2) || MTGamesWon == gamesToWin + 1) {won = MT} else {turn = (turn + 1) % 4}} -> NextGame
	10000 - ((probToUse * TServe_MTWin_HighProb) + ((1 - probToUse) * TServe_MTWin_LowProb)): KSWins{KSGamesWon++} -> GoNext{if ((KSGamesWon == gamesToWin && KSGamesWon >= MTGamesWon + 2) || KSGamesWon == gamesToWin + 1) {won = KS} else {turn = (turn + 1) % 4}} -> NextGame
};

#define MTWin won == MT;

#assert SetWithLowProb reaches MTWin with prob;
#assert SetWithHighProb reaches MTWin with prob;