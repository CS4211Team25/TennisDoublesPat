// Pair 1: McNally and Townsend
//
// ------+------
// |  1  |  2  |
// |-----|-----|
// |  3  |  4  |
// |===========|
// |  5  |  6  |
// |-----|-----|
// |  7  |  8  |
// ------+------
// 
// Pair 2: Krejcikova and Siniakova
//       *****

enum{KServe, MServe, SServe, TServe}; //Starting serves
enum{MT, KS, na}; //Team names

var turn = na; //Serve turn;
var MTscore = 0;
var KSscore = 0;
var won = na;
var ball = 9;

TieBreakGame = WhoServe1st; (MTServe [] KSServe);

WhoServe1st = []i:{KServe, SServe, MServe, TServe}@ TossCoin{turn = i} -> Skip;

// KS - First and Second Serves
KSServe = [won == na && turn == KServe] KTurnToServe -> K_FirstServe [] [won == na && turn == SServe] STurnToServe -> S_FirstServe;

K_FirstServe = K_FirstServeFrom7 [] K_FirstServeFrom8;
S_FirstServe = S_FirstServeFrom7 [] S_FirstServeFrom8;
//This is an alternative method to showing that K/S will serve from position 7/8 with equal probability
//K_FirstServe = pcase {                              
//			1: ServeFrom7 -> K_FirstServeFrom7
//			1: ServeFrom8 -> K_FirstServeFrom8
//};
//
//S_FirstServe = pcase {                              
//			1: ServeFrom7 -> S_FirstServeFrom7
//			1: ServeFrom8 -> S_FirstServeFrom8
//};


K_FirstServeFrom7 = pcase {                              
			20: ServeToPosition2{ball = 2} -> MT_ServeReturnFrom2
			7: ServeError{ball = 9} -> K_SecondServeFrom7
};
			
K_FirstServeFrom8 = pcase {                              
			17: ServeToPosition1{ball = 1} -> MT_ServeReturnFrom1
			11: ServeError{ball = 9} -> K_SecondServeFrom7
};

K_SecondServeFrom7 = pcase {                              
			7: ServeToPosition2{ball = 2} -> MT_ServeReturnFrom2
			0: ServeError{ball = 9} -> KSDoubleFault{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} } -> NextPt
};

K_SecondServeFrom8 = pcase {                              
			10: ServeToPosition1{ball = 1} -> MT_ServeReturnFrom1
			1: ServeError{ball = 9} -> KSDoubleFault{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} } -> NextPt
};		

S_FirstServeFrom7 = pcase {                              
			11: ServeToPosition2{ball = 2} -> MT_ServeReturnFrom2
			9: ServeError{ball = 9} -> K_SecondServeFrom7
};
			
S_FirstServeFrom8 = pcase {                              
			11: ServeToPosition1{ball = 1} -> MT_ServeReturnFrom1
			9: ServeError{ball = 9} -> K_SecondServeFrom7
};

S_SecondServeFrom7 = pcase {                              
			7: ServeToPosition2{ball = 2} -> MT_ServeReturnFrom2
			2: ServeError{ball = 9} -> KSDoubleFault{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} } -> NextPt
};

S_SecondServeFrom8 = pcase {                              
			7: ServeToPosition1{ball = 1} -> MT_ServeReturnFrom1
			2: ServeError{ball = 9} -> KSDoubleFault{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} } -> NextPt
};

// KS - Serve Return
KS_ServeReturnFrom7 = pcase {                              
			0: KServeReturn -> K_ServeReturnFrom7
			34: SServeReturn -> S_ServeReturnFrom7
			6: FailToReturn{ball = 9} -> MTWinPoint{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} } -> NextPt
};

KS_ServeReturnFrom8 = pcase {                              
			34: KServeReturn -> K_ServeReturnFrom8
			0: SServeReturn -> S_ServeReturnFrom8
			12: FailToReturn{ball = 9} -> MTWinPoint{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} } -> NextPt
};		

// No data on case K Serve Return from 7
K_ServeReturnFrom7 = pcase {
			0: BH_ServeReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			0: BH_ServeReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			0: BH_ServeReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			0: BH_ServeReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4
			0: FH_ServeReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			0: FH_ServeReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			0: FH_ServeReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			0: FH_ServeReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4                         
			0: BH_ServeReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
			0: FH_ServeReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
};	

K_ServeReturnFrom8 = pcase {
			4: BH_ServeReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			0: BH_ServeReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			4: BH_ServeReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			4: BH_ServeReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4
			8: FH_ServeReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			4: FH_ServeReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			1: FH_ServeReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			9: FH_ServeReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4                         
			7: BH_ServeReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
			5: FH_ServeReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
};	

S_ServeReturnFrom7 = pcase {
			0: BH_ServeReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			3: BH_ServeReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			5: BH_ServeReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			3: BH_ServeReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4
			3: FH_ServeReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			10: FH_ServeReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			7: FH_ServeReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			3: FH_ServeReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4                         
			1: BH_ServeReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
			5: FH_ServeReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
};	

// No data on case S Serve Return from 8
S_ServeReturnFrom8 = pcase {
			0: BH_ServeReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			0: BH_ServeReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			0: BH_ServeReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			0: BH_ServeReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4
			0: FH_ServeReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			0: FH_ServeReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			0: FH_ServeReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			0: FH_ServeReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4                         
			0: BH_ServeReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
			0: FH_ServeReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
};	

// KS - Normal Return
KS_NormalReturnFrom5 = pcase {                              
			4: KNormalReturn -> K_NormalReturnFrom5
			28: SNormalReturn -> S_NormalReturnFrom5
			3: FailToReturn{ball = 9} -> MTWinPoint{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} } -> NextPt
};

KS_NormalReturnFrom6 = pcase {                              
			21: KNormalReturn -> K_NormalReturnFrom6
			10: SNormalReturn -> S_NormalReturnFrom6
			6: FailToReturn{ball = 9} -> MTWinPoint{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} } -> NextPt
};

KS_NormalReturnFrom7 = pcase {                              
			12: KNormalReturn -> K_NormalReturnFrom7
			35: SNormalReturn -> S_NormalReturnFrom7
			10: FailToReturn{ball = 9} -> MTWinPoint{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} } -> NextPt
};

KS_NormalReturnFrom8 = pcase {                              
			73: KNormalReturn -> K_NormalReturnFrom8
			14: SNormalReturn -> S_NormalReturnFrom8
			19: FailToReturn{ball = 9} -> MTWinPoint{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} } -> NextPt
};

K_NormalReturnFrom5 = pcase {
			0: BH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			0: BH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			0: BH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			0: BH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4
			0: FH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			1: FH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			1: FH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			1: FH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4                         
			1: BH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
			0: FH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
};	

K_NormalReturnFrom6 = pcase {
			0: BH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			3: BH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			5: BH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			4: BH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4
			0: FH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			2: FH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			5: FH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			2: FH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4                         
			1: BH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
			2: FH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
};	

K_NormalReturnFrom7 = pcase {
			2: BH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			2: BH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			1: BH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			1: BH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4
			1: FH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			1: FH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			2: FH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			2: FH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4                         
			0: BH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
			3: FH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
};	

K_NormalReturnFrom8 = pcase {
			2: BH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			4: BH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			5: BH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			10: BH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4
			12: FH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			12: FH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			13: FH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			15: FH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4                         
			5: BH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
			10: FH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
};	

S_NormalReturnFrom5 = pcase {
			4: BH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			2: BH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			4: BH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			3: BH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4
			5: FH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			2: FH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			3: FH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			3: FH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4                         
			1: BH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
			1: FH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
};	

S_NormalReturnFrom6 = pcase {
			1: BH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			0: BH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			1: BH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			0: BH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4
			1: FH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			1: FH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			1: FH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			4: FH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4                         
			1: BH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
			2: FH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
};	

S_NormalReturnFrom7 = pcase {
			3: BH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			6: BH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			8: BH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			7: BH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4
			2: FH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			2: FH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			5: FH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			2: FH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4                         
			5: BH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
			2: FH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
};	

S_NormalReturnFrom8 = pcase {
			0: BH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			0: BH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			2: BH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			2: BH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4
			3: FH_NormalReturnToPosition1{ball = 1} -> MT_NormalReturnFrom1
			0: FH_NormalReturnToPosition2{ball = 2} -> MT_NormalReturnFrom2
			3: FH_NormalReturnToPosition3{ball = 3} -> MT_NormalReturnFrom3
			4: FH_NormalReturnToPosition4{ball = 4} -> MT_NormalReturnFrom4                         
			1: BH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
			3: FH_NormalReturn_Out{ball = 9} -> KSOut{MTscore++; if (MTscore == 7) {won = MT} else { turn = (turn+1)%4} }
				-> NextPt
};	


// MT - First and Second Serves
MTServe = [won == na && turn == MServe ] MTurnToServe -> M_FirstServe [] [won == na && turn == TServe] TTurnToServe -> T_FirstServe;

M_FirstServe = M_FirstServeFrom1 [] M_FirstServeFrom2;
T_FirstServe = T_FirstServeFrom1 [] T_FirstServeFrom2;
//M_FirstServe = pcase {                              
//			1: ServeFrom1 -> M_FirstServeFrom1
//			1: ServeFrom2 -> M_FirstServeFrom2
//};
//
//T_FirstServe = pcase {                              
//			1: ServeFrom1 -> T_FirstServeFrom1
//			1: ServeFrom2 -> T_FirstServeFrom2
//};


M_FirstServeFrom1 = pcase {                              
			22: ServeToPosition8{ball = 8} -> KS_ServeReturnFrom8
			5: ServeError{ball = 9} -> M_SecondServeFrom1
};
			
M_FirstServeFrom2 = pcase {                              
			22: ServeToPosition7{ball = 7} -> KS_ServeReturnFrom7
			5: ServeError{ball = 9} -> M_SecondServeFrom2
};
			
T_FirstServeFrom1 = pcase {                              
			22: ServeToPosition8{ball = 8} -> KS_ServeReturnFrom8
			5: ServeError{ball = 9} -> T_SecondServeFrom1
};
			
T_FirstServeFrom2 = pcase {                              
			22: ServeToPosition7{ball = 7} -> KS_ServeReturnFrom7
			5: ServeError{ball = 9} -> T_SecondServeFrom2
};
		
M_SecondServeFrom1 = pcase {                              
			11: ServeToPosition8{ball = 8} -> KS_ServeReturnFrom8
			5: ServeError{ball = 9} -> MTDoubleFault{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} } -> NextPt
};

M_SecondServeFrom2 = pcase {                              
			10: ServeToPosition7{ball = 7} -> KS_ServeReturnFrom7
			5: ServeError{ball = 9} -> MTDoubleFault{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} } -> NextPt
};
			
T_SecondServeFrom1 = pcase {                              
			11: ServeToPosition8{ball = 8} -> KS_ServeReturnFrom8
			5: ServeError{ball = 9} -> MTDoubleFault{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} } -> NextPt
};

T_SecondServeFrom2 = pcase {                              
			10: ServeToPosition7{ball = 7} -> KS_ServeReturnFrom7
			5: ServeError{ball = 9} -> MTDoubleFault{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} } -> NextPt
};

//MT - Serve Return
MT_ServeReturnFrom1 = pcase {                              
			10: MServeReturn -> M_ServeReturnFrom1
			10: TServeReturn -> T_ServeReturnFrom1
			5: FailToReturn{ball = 9} -> KSWinPoint{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} } -> NextPt
};

MT_ServeReturnFrom2 = pcase {                              
			10: MServeReturn -> M_ServeReturnFrom2
			10: TServeReturn -> T_ServeReturnFrom2
			5: FailToReturn{ball = 9} -> KSWinPoint{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} } -> NextPt
};

M_ServeReturnFrom1 = pcase {                              
			22: BH_ServeReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			22: BH_ServeReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			22: BH_ServeReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			22: BH_ServeReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			22: FH_ServeReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			22: FH_ServeReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			22: FH_ServeReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			22: FH_ServeReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			5: FH_ServeReturnError{ball = 9} -> KSWinPoint{KSscore++; if (KSscore == 7) {won = KS} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
      		5: BH_ServeReturnError{ball = 9} -> KSWinPoint{KSscore++; if (KSscore == 7) {won = KS} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
};

M_ServeReturnFrom2 = pcase {                              
			22: BH_ServeReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			22: BH_ServeReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			22: BH_ServeReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			22: BH_ServeReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			22: FH_ServeReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			22: FH_ServeReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			22: FH_ServeReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			22: FH_ServeReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			5: FH_ServeReturnError{ball = 9} -> KSWinPoint{KSscore++; if (KSscore == 7) {won = KS} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
      		5: BH_ServeReturnError{ball = 9} -> KSWinPoint{KSscore++; if (KSscore == 7) {won = KS} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
};

T_ServeReturnFrom1 = pcase {                              
			22: BH_ServeReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			22: BH_ServeReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			22: BH_ServeReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			22: BH_ServeReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			22: FH_ServeReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			22: FH_ServeReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			22: FH_ServeReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			22: FH_ServeReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			5: FH_ServeReturnError{ball = 9} -> KSWinPoint{KSscore++; if (KSscore == 7) {won = KS} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
      		5: BH_ServeReturnError{ball = 9} -> KSWinPoint{KSscore++; if (KSscore == 7) {won = MT} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
};

T_ServeReturnFrom2 = pcase {                              
			22: BH_ServeReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			22: BH_ServeReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			22: BH_ServeReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			22: BH_ServeReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			22: FH_ServeReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			22: FH_ServeReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			22: FH_ServeReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			22: FH_ServeReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			5: FH_ServeReturnError{ball = 9} -> KSWinPoint{KSscore++; if (KSscore == 7) {won = KS} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
      		5: BH_ServeReturnError{ball = 9} -> KSWinPoint{KSscore++; if (KSscore == 7) {won = KS} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
};

//MT - Normal Return
MT_NormalReturnFrom1 = pcase {
			10: MNormalReturn -> M_NormalReturnFrom1
			10: TNormalReturn -> T_NormalReturnFrom1
			5: FailToReturn{ball = 9} -> KSWinPoint{KSscore++; if (KSscore == 7) {won = KS} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
};

MT_NormalReturnFrom2 = pcase {
			10: MNormalReturn -> M_NormalReturnFrom2
			10: TNormalReturn -> T_NormalReturnFrom2
			5: FailToReturn{ball = 9} -> KSWinPoint{KSscore++; if (KSscore == 7) {won = KS} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
};

MT_NormalReturnFrom3 = pcase {
			10: MNormalReturn -> M_NormalReturnFrom3
			10: TNormalReturn -> T_NormalReturnFrom3
			5: FailToReturn{ball = 9} -> KSWinPoint{KSscore++; if (KSscore == 7) {won = KS}     		                                                        
																	else { turn = (turn+1)%4} }-> NextPt
};

MT_NormalReturnFrom4 = pcase {
			10: MNormalReturn -> M_NormalReturnFrom4
			10: TNormalReturn -> T_NormalReturnFrom4
			5: FailToReturn{ball = 9} -> KSWinPoint{KSscore++; if (KSscore == 7) {won = KS} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
};		

M_NormalReturnFrom1 = pcase {
			2: BH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: BH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: BH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: BH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			2: FH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: FH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: FH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: FH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8                         
			10: BH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
			10: FH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
};	

M_NormalReturnFrom2 = pcase {
			2: BH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: BH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: BH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: BH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			2: FH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: FH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: FH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: FH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8                         
			10: BH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
			10: FH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
};

M_NormalReturnFrom3 = pcase {
			2: BH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: BH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: BH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: BH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			2: FH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: FH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: FH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: FH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8                         
			10: BH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
			10: FH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
};	

M_NormalReturnFrom4 = pcase {
			2: BH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: BH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: BH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: BH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			2: FH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: FH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: FH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: FH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8                         
			10: BH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
			10: FH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
};					

T_NormalReturnFrom1 = pcase {
			2: BH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: BH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: BH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: BH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			2: FH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: FH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: FH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: FH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8                         
			10: BH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
			10: FH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
};

T_NormalReturnFrom2 = pcase {
			2: BH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: BH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: BH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: BH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			2: FH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: FH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: FH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: FH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8                         
			10: BH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
			10: FH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
};

T_NormalReturnFrom3 = pcase {
			2: BH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: BH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: BH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: BH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			2: FH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: FH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: FH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: FH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8                         
			10: BH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
			10: FH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
};			
		
T_NormalReturnFrom4 = pcase {
			2: BH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: BH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: BH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: BH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8
			2: FH_NormalReturnToPosition5{ball = 5} -> KS_NormalReturnFrom5
			2: FH_NormalReturnToPosition6{ball = 6} -> KS_NormalReturnFrom6
			2: FH_NormalReturnToPosition7{ball = 7} -> KS_NormalReturnFrom7
			2: FH_NormalReturnToPosition8{ball = 8} -> KS_NormalReturnFrom8                         
			10: BH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
			10: FH_NormalReturn_Out{ball = 9} -> MTOut{KSscore++; if (KSscore == 7) {won = KS} else { turn = (turn+1)%4} }
				-> NextPt
};


NextPt = KSServe [] MTServe [] ([won != na] GameOver -> Skip);
		
#define KSWin won == KS;
#define MTWin won == MT;
#assert TieBreakGame reaches KSWin with prob;
#assert TieBreakGame reaches MTWin with prob;
		
